<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2015 Open Justice Broker Consortium

-->


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:ctx="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:nc20="http://niem.gov/niem/niem-core/2.0"
       xsi:schemaLocation="
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       ">
    <!-- needed cxf imports -->
    <import resource="classpath:META-INF/cxf/cxf.xml"/>

	<camel:camelContext xmlns="http://camel.apache.org/schema/spring" id="warrant_modification_context">
	
		<endpoint id="warrantModRequestServiceEndpoint"
			uri="cxf:bean:warrantModificationIntermediaryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${warrantMod.cxflogging}" />

		<endpoint id="warrantModResultsHandlerServiceEndpoint"
			uri="cxf:bean:warrantModificationIntermediaryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${warrantMod.cxflogging}" />

	    <endpoint id="warrantModificationAdapterRequestServiceEndpoint" 
	    	uri="cxf:bean:warrantModificationAdapterRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${warrantMod.cxflogging}"/>
	
		<endpoint id="warrantModificationConnectorResultsHandlerServiceEndpoint" 
			uri="cxf:bean:warrantModificationConnectorResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${warrantMod.cxflogging}"/>                        



		<camel:route id="warrantModRequest_route">
		
			<camel:from uri="warrantModRequestServiceEndpoint" />
			
			<camel:to uri="direct:dbAuditLog"/>
						
			<!-- Get WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />
									
			<camel:setHeader headerName="operationName"><constant>SubmitWarrantModificationRequest</constant></camel:setHeader>
			<camel:setHeader headerName="operationNamespace"><constant>http://ojbc.org/Services/WSDL/WarrantModificationRequestService/1.0</constant></camel:setHeader>

			<!-- Add the reply to address to the map using the federated query guid as the key -->
			<camel:to uri="bean:wsAddressingReplyToManager?method=putReplyToAddress"/>
												
			<!-- This wiretap will start the message timer. -->
			<camel:wireTap uri="direct:startWarrantModReqTimer"/>

			<camel:log message="\n\n\n Timer started \n\n\n"/>

			<camel:recipientList>
				<simple>${warrantMod.warrantModRequestAdapterEndpoint}</simple>				
			</camel:recipientList>

		</camel:route>			
				     
				      
		<camel:route>
			<from uri="direct:startWarrantModReqTimer"/>
			<setBody>
				<constant>START_QUERY_TIMER</constant>
			</setBody>
			<camel:to uri="direct:aggregateWarrantModResponse" />		
		</camel:route>
	
	
		<!--  Warrants Mod Results Handler Route.  Called by Adapter -->
		<camel:route id="warrantModResultsHandler_route">
		
			<camel:from uri="warrantModResultsHandlerServiceEndpoint"/>
			
			<camel:to uri="direct:dbAuditLog"/>
			
			<camel:log message="\n\n\n warrantModResultsHandler_route...\n\n\n"/>
						
			<camel:to uri="bean:federatedQueryMessageProcessor?method=processFederatedResponse" />
			
			<camel:log message="\n\n\n Sending warrant mod response to Aggregator...\n\n\n" />
			
			<camel:to uri="direct:aggregateWarrantModResponse" />
		</camel:route>
	
	
	    <camel:route id="aggregateWarrantMod_route">
	    
	      <from uri="direct:aggregateWarrantModResponse" />
	      
			<log message="\n\n\n In aggregator with correlation id: ${in.header.federatedQueryRequestGUID} \n\n\n"/>
			
			<aggregate groupExchanges="true" eagerCheckCompletion="true">
			
				<correlationExpression>
					<camel:header>federatedQueryRequestGUID</camel:header>
				</correlationExpression>
				<completionTimeout>
					<camel:simple>${properties:warrantMod.timeout}</camel:simple>
				</completionTimeout>
				<completionSize>
					<header>federatedQueryNumberOfEndpointsRequested</header>
				</completionSize>
				
				<log message="\n\n\n Completed by $simple{property.CamelAggregatedCompletedBy}, completion size $simple{property.CamelAggregatedSize}, aggregation key $simple{property.CamelAggregatedCorrelationKey}.  Timeout for aggregation set at: {{warrantMod.timeout}} \n\n\n" />
				
				<to uri="bean:federatedQueryResponseAggregator?method=aggregateGroupMessagesString" />

				<log message="\n\n\n completed aggregated body: \n\n ${body} \n\n\n" loggingLevel="DEBUG"/>
				
				<camel:to uri="direct:processFederatedResponse"/>

			</aggregate>
	      
	    </camel:route>
	    
	    <!-- Process aggregated responses here -->
		<camel:route id="warrantModResponseAggregator_Route">
		
			<camel:from uri="direct:processFederatedResponse"/>
				
			<!-- This line remove the OJBWrapper element that the aggregator adds, This XPath works because we only have one response -->
			<camel:setBody><xpath>/OJBAggregateResponseWrapper/*[1]</xpath></camel:setBody>
			
			<camel:to uri="bean:wsAddressingReplyToManager?method=getReplyToAddress"/>

			<camel:to uri="bean:wsAddressingReplyToManager?method=removeReplyToAddress"/>
			
			<camel:to uri="bean:WSAddressingEndpointProcessor?method=processReplyToAddress" />	
				
			<camel:choice>
				<camel:when>
					<camel:simple>${in.headers.recipientListReplyToEndpoint} != ''</camel:simple> 
			
			        <camel:setHeader headerName="operationName">
			            <constant>SubmitWarrantModificationResponse</constant>
			        </camel:setHeader>
			        <camel:setHeader headerName="operationNamespace">
			            <constant>http://ojbc.org/Services/WSDL/WarrantModificationResponseService/1.0</constant>
			        </camel:setHeader>
					
					<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>			
					
					<camel:log message="\n\n\n Sending warrant mod response to ${in.headers.recipientListReplyToEndpoint} \n\n\n" />			
								
					<camel:recipientList>
						<camel:header>recipientListReplyToEndpoint</camel:header>
					</camel:recipientList>
				</camel:when>
				<camel:otherwise>
					<camel:log message="\n\n\n Unable to find endpoint for replyTo address: ${in.headers.WSAddressingReplyTo} \n\n\n"/>
				</camel:otherwise>		
			</camel:choice>	

		</camel:route>
	    
	    
		<route id="dbAuditlog_route">
		
			<from uri="direct:dbAuditLog"/>

			<camel:choice>
				<camel:when>
					<camel:simple>${properties:warrantMod.dbAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:sqlLoggingProcessor?method=logExchange"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>
					
		</route>
		
					    
	</camel:camelContext>
  
	<!-- Spring Beans -->
	<util:map map-class="java.util.HashMap" id="federatedQueryManager" />

	<bean id="federatedQueryResponseAggregator"
		class="org.ojbc.util.fedquery.processor.FederatedQueryResponseHandlerAggregator">
		<property name="federatedQueryManager">
			<ref bean="federatedQueryManager" />
		</property>
	</bean>

	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />


   	<bean id="WSAddressingEndpointProcessor" class="org.ojbc.util.camel.processor.WSAddressingEndpointProcessor">
		<property name ="endpointReplyToMap" ref="wsAddressReplyToEndpointMap"/>
	</bean>		
	
	<bean id="wsAddressingReplyToManager" class="org.ojbc.util.fedquery.processor.WSAddressingReplyToManager">
		<property name="wsAddressingEndpointProcessor" ref="WSAddressingEndpointProcessor"/>
	</bean>

	<bean id="accessControlProcessor" class="org.ojbc.util.camel.processor.accesscontrol.AccessControlProcessor" />
	
	
</beans>
