<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2015 Open Justice Broker Consortium

-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:cxf="http://camel.apache.org/schema/cxf" 
	xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
	xmlns:ctx="http://www.springframework.org/schema/context" 
	xmlns:sec="http://cxf.apache.org/configuration/security"
	xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:j="http://www.it.ojp.gov/jxdm/3.0.3"
	xmlns:nc20="http://niem.gov/niem/niem-core/2.0" 
	xmlns:s="http://niem.gov/niem/structures/2.0"
	xmlns:pcext="http://ojbc.org/IEPD/Extensions/ParoleCase/1.0"
	xmlns:jxdm41="http://niem.gov/niem/domains/jxdm/4.1" 
	xmlns:pci="http://ojbc.org/IEPD/Exchange/ParoleCaseInitiation/1.0" 
	xsi:schemaLocation="
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/osgi-compendium http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/util
	   http://www.springframework.org/schema/util/spring-util.xsd
       ">
	<!-- needed cxf imports -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring" streamCache="true">
		
		<endpoint id="inputDir"
			uri="file:///${publishSubscribe.paroleIntermediaryDirectory}/input?idempotent=true&amp;moveFailed=${publishSubscribe.paroleIntermediaryDirectory}/error&amp;move=processed/" />

		<endpoint id="personSearchRequestEndpoint"
			uri="cxf:bean:personSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${parole.event.cxflogging}" />
			
 		<endpoint id="personSearchResultsEndpoint"
			uri="cxf:bean:personSearchResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${parole.event.cxflogging}" />
						

		<!-- Parole Service, Input File Drop Handler -->
		<camel:route>
			<camel:from uri="inputDir" />
			
			<camel:log message="\n\n\n Received input message: \n\n ${body} \n\n"/>
						
			<camel:setHeader headerName="operationName">
				<camel:constant>Report-Parole-Case-Initiation</camel:constant>
			</camel:setHeader>
			
			<camel:log message="\n\n\n OPERATION: \n\n ${in.header.operationName}\n\n" />
			
			<camel:to uri="direct:processParoleDocument" />
		</camel:route>


		<!-- Parole Service Handler -->
		<camel:route>
			<camel:from uri="paroleEventHandlerServiceEndpoint" />
			
			<camel:log message="This is the body the service recieved: ${body}" loggingLevel="DEBUG"/>
			<camel:log message="THIS IS THE OPERATION:, ${in.header.operationName}" />
			
			<camel:to uri="direct:processParoleDocument" />
		</camel:route>


		<camel:route>
			<camel:from uri="direct:processParoleDocument" />
			
			<camel:log message="\n\n\n processing parole document... \n\n\n" />

			<camel:setHeader headerName="systemName">
				<camel:xpath>//pcext:SystemName/text()</camel:xpath>
			</camel:setHeader>

			<camel:to uri="bean:systemNameToTopicExpressionMapper?method=populateTopicExpressionHeader" />

			<camel:filter>
				<camel:simple>${in.header.operationName} == 'Report-Parole-Case-Initiation'</camel:simple>
																								
				<camel:choice>
					<camel:when><simple>${header.topicExpression} == 'topics:person/arrest'</simple>	
					
						<log message="\n\n\n Found Report Case Init - Arrest ... \n\n\n"/>
									
						<to uri="direct:processCaseInitArrestWithPersonSearchFbiId"/>					
					</camel:when>										
					<camel:otherwise>					
						<log message="\n\n\n Found Report Case Init - NON-arrest \n\n\n"/>
						
						<to uri="direct:transformAndInvokeSubscriptionProcessor" />						
					</camel:otherwise>
				
				</camel:choice>				
			</camel:filter>

			<camel:filter>
				<camel:simple>${in.header.operationName} == 'Report-Parole-Case-Termination'</camel:simple>
				<camel:wireTap uri="direct:transformAndInvokeUnsubscriptionProcessor" />
			</camel:filter>

		</camel:route>
		
				
		<camel:route>
			<camel:from uri="direct:transformAndInvokeUnsubscriptionProcessor" />
			
			<camel:convertBodyTo type="java.lang.String"/>
			
			<camel:to uri="xslt:xslt/paroleDocumentToUnsubscription.xsl" />
						
			<camel:log message="\n\n\n After transform: \n\n ${body} \n\n\n" />
			<camel:to
				uri="bean:subscriptionManagerServiceMessageProcessor?method=sendResponseMessage" />
		</camel:route>


		<camel:route>
			<camel:from uri="direct:transformAndInvokeSubscriptionProcessor" />
			
			<camel:log message="\n\n\n transformAndInvokeSubscriptionProcessor...\n\n\n" />
				
			<camel:convertBodyTo type="java.lang.String"/>
																				
			<camel:to uri="xslt:xslt/paroleDocumentToSubscription.xsl" />
			
			<camel:log message="\n\n\n After paroleDocumentToSubscription.xsl, body: \n\n ${body} \n\n\n" />
			
			<camel:to uri="bean:notificationBrokerServiceMessageProcessor?method=sendResponseMessage" />
			
		</camel:route>
		

		<camel:route id="processCaseInitArrestWithPersonSearchFbiId_Route">
		
			<camel:from uri="direct:processCaseInitArrestWithPersonSearchFbiId" />
			
			<log message="\n\n\n  processCaseInitArrestWithPersonSearchFbiId... \n\n\n"/>
			
			<camel:setHeader headerName="originalCaseInitArrestMessageBody">
				<camel:simple>${body}</camel:simple>			
			</camel:setHeader>				
		
			<camel:setHeader headerName="sid">
				<camel:xpath>/pci:ParoleCaseInitiation/pcext:ParoleCase/jxdm41:Supervision/nc20:SupervisionPerson/nc20:PersonStateIdentification/nc20:IdentificationID/text()</camel:xpath>						
			</camel:setHeader>
			
			<camel:log message="\n\n\n Using SID: ${header.sid} \n\n\n"/>					
													
			<camel:to uri="xslt:xslt/personSearchRequest.xsl"/>			
			
			<log message="\n\n\n Person Search Body: \n ${body} \n\n\n"/>
						
			<to uri="direct:callPersonSearch"/>			
				
		</camel:route>


		<camel:route id="personSearchRequestRoute">
		
			<camel:from uri="direct:callPersonSearch" />
			
			<setHeader headerName="operationName"><constant>SubmitPersonSearchRequest</constant></setHeader>			
			<setHeader headerName="operationNamespace"><constant>http://ojbc.org/Services/WSDL/PersonSearchRequestService/1.0</constant></setHeader>			
			
			<setHeader headerName="personSearchGuid"><constant>abc123</constant></setHeader>
									
			<!-- Note: the original CaseInit body is saved in a header while being sent on a timer message body doc to the aggregator -->
			<camel:wireTap uri="direct:startPersonSearchTimer"/>

			<camel:log message="\n\n\n Person Search Timer started... \n\n\n"/>

			<camel:to uri="personSearchRequestEndpoint"/>

		</camel:route>


		<route id="personSearchTimerRoute">
		
			<from uri="direct:startPersonSearchTimer"/>
						
			<setHeader headerName="personSearchGuid">
				<constant>abc123</constant>
			</setHeader>
			
			<setBody>						
				<constant>START_PERSON_SEARCH_TIMER</constant>
			</setBody>
			
			<to uri="direct:aggregatePersonSearchResult" />		
		</route>		
		
		
		<camel:route id="personSearchResponseRoute">
		
			<camel:from uri="personSearchResultsEndpoint"/>

			<!-- TODO (Note: broken) Standard MessageProcessor looks for  'federatedQueryRequestGUID' but I'm using 'personSearchGuid' -->
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>

			<log message="\n\n\n Recieved person search EntRes response with message ID: ${in.headers.personSearchGuid} \n\n body: \n\n ${body} \n\n\n" />			

			<camel:to uri="direct:aggregatePersonSearchResult"/>						

		</camel:route>


		<camel:route id="aggregatePersonSearchResultRoute">
		
			<from uri="direct:aggregatePersonSearchResult" />
			
				<log message="\n\n\n Aggregator correlation id: ${in.header.personSearchGuid} \n\n\n"/>
				
				<aggregate groupExchanges="true" eagerCheckCompletion="true">
					
					<correlationExpression>
						<camel:header>personSearchGuid</camel:header>
					</correlationExpression>
					
					<completionTimeout>
						<camel:simple>${properties:parole.event.personSearchTimeout}</camel:simple>
					</completionTimeout>
					
					<!-- Completion size is two because we are calling one endpoint (plus the message to start the timer) -->
					<completionSize>
						<constant>2</constant>
					</completionSize>
					
					<log message="\n\n\n Person Search aggregater completed: $simple{property.CamelAggregatedCompletedBy}, completion size $simple{property.CamelAggregatedSize}, aggregation key $simple{property.CamelAggregatedCorrelationKey}.   Timeout for aggregation set at: {{parole.event.personSearchTimeout}} \n\n\n" /> 

					<camel:filter>
						<camel:simple>${property.CamelAggregatedSize} == 1 and ${property.CamelAggregatedCompletedBy} == 'timeout'</camel:simple>
						
						<camel:log message="\n\n\n Person Search service is down or timed out. \n\n\n" />
					</camel:filter>
							
					<to uri="bean:personSearchResponseAggregator?method=addFbiIdToCaseInitMessage" />

					<log message="\n\n\n Aggregated CaseInit message:\n\n ${body} \n\n\n" />
					
					<to uri="direct:handleAggregatedReportWithFbiId" />
				</aggregate>
				
		</camel:route>	
		
		
		<route id="handleAggregatedReportWithFbiIdRoute">
		
			<from uri="direct:handleAggregatedReportWithFbiId"/>
			
			<log message="\n\n\n handleAggregatedReportWithFbiId... \n\n\n"/>
			
			<camel:to uri="bean:personSearchResponseProcessor?method=setFbiIdHeaderFromPersonSearchResponse" />
									
			<camel:setBody>
				<!-- TODO confirm header still in scope, coming from the timer exchange message -->
				<camel:simple>${header.originalCaseInitArrestMessageBody}</camel:simple>
			</camel:setBody>					
						
			<log message="\n\n\n Used header 'originalCaseInitArrestMessageBody' to set Body: \n ${body} \n\n\n"/>						
															
			<to uri="direct:transformAndInvokeSubscriptionProcessor" />		
		
		</route>
		
			    
	</camel:camelContext>
	
	
	<bean id="notificationBrokerServiceMessageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor">
		<property name="operationName">
			<value>Subscribe</value>
		</property>
		<property name="operationNamespace">
			<value>http://docs.oasis-open.org/wsn/brw-2</value>
		</property>
		<property name="destinationEndpoint">
			<value>notificationBrokerService</value>
		</property>
	</bean>

	<bean id="subscriptionManagerServiceMessageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor">
		<property name="operationName">
			<value>Unsubscribe</value>
		</property>
		<property name="operationNamespace">
			<value>http://docs.oasis-open.org/wsn/bw-2</value>
		</property>
		<property name="destinationEndpoint">
			<value>subscriptionManagerService</value>
		</property>
	</bean>

	<bean id="systemNameToTopicExpressionMapper" class="org.ojbc.util.camel.processor.SystemNameToTopicExpressionMapper">
		<property name="systemNameToTopicMap" ref="systemNameToTopicMap" />
	</bean>
		
	<bean id="personSearchResponseProcessor" class="org.ojbc.bundles.intermediaries.parole.event.PersonSearchResponseProcessor"/>
	
	<bean id="personSearchResponseAggregator"
		class="org.ojbc.bundles.intermediaries.parole.event.PersonSearchEntityResolutionResponseHandlerAggregator"/>
	
	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />	
	
</beans>
