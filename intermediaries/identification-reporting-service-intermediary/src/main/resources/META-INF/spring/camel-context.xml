<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2015 Open Justice Broker Consortium

-->

<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:lexs="http://usdoj.gov/leisp/lexs/3.1" 
	xmlns:irsp="http://ojbc.org/IEPD/Extensions/IncidentReportStructuredPayload/1.0"
    xmlns:b="http://docs.oasis-open.org/wsn/b-2" 
    xmlns:lexsdigest="http://usdoj.gov/leisp/lexs/digest/3.1"
    xmlns:ar="http://ojbc.org/IEPD/Exchange/ArrestReport/1.0"
    xmlns:lexspd="http://usdoj.gov/leisp/lexs/publishdiscover/3.1"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">
	<!-- needed cxf imports -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />	
	
	<!-- Error handlers in case of submission errors -->
	<import resource="error-handlers.xml" />
					
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring" id="identification-reporting-service-intermediary">

		<!-- some CXF endpoints are inline to support testing -->	
		<camel:endpoint id="identificationReportingServiceEndpoint"
			uri="cxf:bean:IdentificationReportingService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationReportingService.cxflogging}" />

		<camel:endpoint id="identificationRecordingServiceEndpoint"
			uri="cxf:bean:IdentificationRecordingService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationReportingService.cxflogging}" />
			
		<camel:endpoint id="identificationReportingResponseServiceEndpoint"
			uri="cxf:bean:identificationReportingResponseService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationReportingService.cxflogging}" />
			
		<camel:endpoint id="identificationReportingResponseRecipientEndpoint"
			uri="cxf:bean:identificationReportingResponseRecipient?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationReportingService.cxflogging}" />

			
		<!-- Identification Reporting Service Handler -->
		<camel:route id="IdentificationReportingServiceHandlerRoute">
			<camel:from uri="identificationReportingServiceEndpoint" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>

			<convertBodyTo type="java.lang.String" />

			<camel:to uri="bean:identificationReportProcessor?method=setOperationNameAndNamespace"/>
			
			<camel:filter>
				<camel:simple>${in.header.callIdentificationRecordingService} == 'true'</camel:simple>
				<camel:removeHeaders pattern="*" excludePattern="operationName|operationNamespace|CamelDestinationOverrideUrl"></camel:removeHeaders>
				<camel:to uri="direct:callIdentificationRecordingService" />
			</camel:filter>
			
		</camel:route>

		
		<camel:route errorHandlerRef="identifcationReportErrorHandler" id="CallIdentificationRecordingServiceRoute">
		
			<camel:from uri="direct:callIdentificationRecordingService" />
			
			<camel:log message="Inside route to call Identification Recording service"/>
			
			<camel:to uri="identificationRecordingServiceEndpoint" />
			
			<log message="Called Identification Recording service" />
			
		</camel:route>
		
		
		<!-- TODO call this transformation from the appropriate place -->
		<route id="arrestReportTransform_Route">
		
			<from uri="direct:arrestReportTransform"/>
			
			<to uri="bean:identificationReportProcessor?method=setCurrentDate"/>
			
			<log message = "\n\n\n Transforming with arrestReportTransform.xsl... \n\n\n"/>
		
			<to uri="xslt:xsl/arrestReportTransform.xsl"/>
		</route>						
		
						
		<!-- Identification Reporting Service Handler -->
		<camel:route id="identificationReportingResponseHandlerRoute">
		
			<camel:from uri="identificationReportingResponseServiceEndpoint" />
			
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>			
			
			<camel:setHeader headerName="operationName">
       			<camel:simple>{{identificationReportingService.responseRecipientOperationName}}</camel:simple>
       		</camel:setHeader>
       		<camel:setHeader headerName="operationNamespace">
       			<camel:simple>{{identificationReportingService.responseRecipientServiceNamespace}}</camel:simple>
       		</camel:setHeader>
       		
			<camel:log message="About to send identification recording response message to {{identificationReportingService.responseRecipientServiceEndpoint}}" />			
						
			<camel:to uri="identificationReportingResponseRecipientEndpoint" />
			
		</camel:route>

	</camel:camelContext>
	
	<bean id="identificationReportProcessor" class="org.ojbc.intermediaries.identificationreporting.IdentificationReportProcessor"/>
	
	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />
	
	<!-- See this thread: http://stackoverflow.com/questions/11195506/increase-executor-queue-size-in-cxf-onewayprocessorinterceptor -->
    <bean id="cxf.default.workqueue" class="org.apache.cxf.workqueue.AutomaticWorkQueueImpl">
        <property name="name" value="default" />
        <property name="queueSize" value="2048" />
    </bean>	
</beans>
