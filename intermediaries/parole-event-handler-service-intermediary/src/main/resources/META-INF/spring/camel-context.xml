<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2015 Open Justice Broker Consortium

-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:cxf="http://camel.apache.org/schema/cxf" 
	xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
	xmlns:ctx="http://www.springframework.org/schema/context" 
	xmlns:sec="http://cxf.apache.org/configuration/security"
	xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:j="http://www.it.ojp.gov/jxdm/3.0.3"
	xmlns:nc20="http://niem.gov/niem/niem-core/2.0" 
	xmlns:s="http://niem.gov/niem/structures/2.0"
	xmlns:pcext="http://ojbc.org/IEPD/Extensions/ParoleCase/1.0"
	xmlns:jxdm41="http://niem.gov/niem/domains/jxdm/4.1" 
	xmlns:pci="http://ojbc.org/IEPD/Exchange/ParoleCaseInitiation/1.0" 
	xsi:schemaLocation="
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/osgi-compendium http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/util
	   http://www.springframework.org/schema/util/spring-util.xsd
       ">
	<!-- needed cxf imports -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring" streamCache="true">
		
		<endpoint id="inputDir"
			uri="file:///${publishSubscribe.paroleIntermediaryDirectory}/input?idempotent=true&amp;moveFailed=${publishSubscribe.paroleIntermediaryDirectory}/error&amp;move=processed/" />

		<endpoint id="personSearchRequestEndpoint"
			uri="cxf:bean:personSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${parole.event.cxflogging}" />
			
 		<endpoint id="personSearchResultsEndpoint"
			uri="cxf:bean:personSearchResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${parole.event.cxflogging}" />
						

		<!-- Parole Service, Input File Drop Handler -->
		<camel:route>
			<from uri="inputDir" />
			
			<log message="\n\n\n Received input message: \n\n ${body} \n\n"/>
						
			<setHeader headerName="operationName">
				<constant>Report-Parole-Case-Initiation</constant>
			</setHeader>
			
			<!-- TODO only set one of these message id headers -->
			<setHeader headerName="federatedQueryRequestGUID"><constant>abc123</constant></setHeader>												
			<setHeader headerName="{http://www.w3.org/2005/08/addressing}MessageID"><simple>abc123</simple></setHeader>						
			
			<camel:log message="\n\n\n OPERATION: \n\n ${in.header.operationName}\n\n" />
			
			<camel:to uri="direct:processParoleDocument" />
		</camel:route>


		<!-- Parole Service Handler -->
		<camel:route>
			<camel:from uri="paroleEventHandlerServiceEndpoint" />
			
			<camel:log message="\n\n Received message body: ${body} \n\n" loggingLevel="DEBUG"/>
			<camel:log message="\n\n\n Operation: ${in.header.operationName}\n" />
			
			<camel:to uri="direct:processParoleDocument" />
		</camel:route>


		<camel:route>
			<camel:from uri="direct:processParoleDocument" />
			
			<camel:log message="\n\n\n processing parole document... \n\n\n" />

			<camel:setHeader headerName="systemName">
				<camel:xpath>//pcext:SystemName/text()</camel:xpath>
			</camel:setHeader>

			<camel:to uri="bean:systemNameToTopicExpressionMapper?method=populateTopicExpressionHeader" />

			<camel:filter>
				<camel:simple>${in.header.operationName} == 'Report-Parole-Case-Initiation'</camel:simple>
																								
				<camel:choice>
					<camel:when><simple>${header.topicExpression} == 'topics:person/arrest'</simple>	
					
						<log message="\n\n\n Found Report Case Init - Arrest ... \n\n\n"/>
									
						<to uri="direct:processCaseInitArrestWithPersonSearchFbiId"/>					
					</camel:when>										
					<camel:otherwise>					
						<log message="\n\n\n Found Report Case Init - NON-arrest \n\n\n"/>
						
						<to uri="direct:transformAndInvokeSubscriptionProcessor" />						
					</camel:otherwise>
				
				</camel:choice>				
			</camel:filter>

			<camel:filter>
				<camel:simple>${in.header.operationName} == 'Report-Parole-Case-Termination'</camel:simple>
				<camel:wireTap uri="direct:transformAndInvokeUnsubscriptionProcessor" />
			</camel:filter>

		</camel:route>
		
		
		<camel:route id="processCaseInitArrestWithPersonSearchFbiId_Route">
		
			<camel:from uri="direct:processCaseInitArrestWithPersonSearchFbiId" />
			
			<log message="\n\n\n  processCaseInitArrestWithPersonSearchFbiId... \n\n\n"/>
			
			<camel:convertBodyTo type="String"/> 
			
			<camel:setHeader headerName="originalCaseInitArrestMessageBody">
				<camel:simple>${body}</camel:simple>				
			</camel:setHeader>
			
			<log message="\n\n\n CASE INIT BODY: \n\n ${body} \n\n\n"/>			
			
		
			<camel:setHeader headerName="sid">
				<camel:xpath>/pci:ParoleCaseInitiation/pcext:ParoleCase/jxdm41:Supervision/nc20:SupervisionPerson/nc20:PersonStateIdentification/nc20:IdentificationID/text()</camel:xpath>						
			</camel:setHeader>
			
			<camel:log message="\n\n\n Using SID: ${header.sid} \n\n\n"/>					
													
			<camel:to uri="xslt:xslt/personSearchRequest.xsl"/>			
			
			<log message="\n\n\n Person Search Request Body: \n ${body}"/>												
						
			<to uri="direct:callPersonSearch"/>			
				
		</camel:route>


		<camel:route id="personSearchRequestRoute">
		
			<camel:from uri="direct:callPersonSearch" />
			
			<setHeader headerName="operationName"><constant>SubmitPersonSearchRequest</constant></setHeader>			
			<setHeader headerName="operationNamespace"><constant>http://ojbc.org/Services/WSDL/PersonSearchRequestService/1.0</constant></setHeader>
											
			<log message="\n\n\n PersonSearchRequest using guid: ${header.federatedQueryRequestGUID} \n\n\n"/>						
															
			<!-- Note: the original CaseInit body is saved in a header while being sent on a timer message body doc to the aggregator -->
			<camel:wireTap uri="direct:startPersonSearchTimer"/>

			<camel:log message="\n\n\n Person Search Timer started... \n\n\n"/>

			<!-- TODO just one of these replyTo headers(not both) Use MessageProcessor to foward MessageId but ensure MessageProcessor doesn't delete other IN headers -->							
			<setHeader headerName="WSAddressingReplyTo"><simple>{{parole.event.personSearchResultsReplyToEndpoint}}</simple></setHeader>
			<setHeader headerName="{http://www.w3.org/2005/08/addressing}ReplyTo"><simple>{{parole.event.personSearchResultsReplyToEndpoint}}</simple></setHeader>	

			<camel:to uri="personSearchRequestEndpoint"/>

		</camel:route>


		<route id="personSearchTimerRoute">
		
			<from uri="direct:startPersonSearchTimer"/>						
			
			<log message="\n\n\n CaseInit Timer message using guid: ${header.federatedQueryRequestGUID} \n\n\n" />
						
			<setBody>
				<constant>START_PERSON_SEARCH_TIMER</constant>
			</setBody>			
			
			<to uri="direct:aggregatePersonSearchResult" />		
		</route>		
		
		
		<camel:route id="personSearchResponseRoute">
		
			<camel:from uri="personSearchResultsEndpoint"/>

			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>

			<log message="\n\n\n Recieved person search EntRes response with message ID: ${in.headers.federatedQueryRequestGUID} \n\n body: \n\n ${body} \n\n\n" />			

			<log message = "\n\n\n Sending person search response to Aggregator with guid: ${header.federatedQueryRequestGUID} \n\n\n"/>
			
			<camel:to uri="direct:aggregatePersonSearchResult"/>						

		</camel:route>


		<camel:route id="aggregatePersonSearchResultRoute">
		
			<from uri="direct:aggregatePersonSearchResult" />
			
				<log message="\n\n\n Aggregator correlation id: ${in.header.federatedQueryRequestGUID} \n\n\n"/>
				
				<aggregate groupExchanges="true" eagerCheckCompletion="true">
					
					<correlationExpression>
						<camel:header>federatedQueryRequestGUID</camel:header>
					</correlationExpression>
					
					<completionTimeout>
						<camel:simple>${properties:parole.event.personSearchTimeout}</camel:simple>
					</completionTimeout>
					
					<!-- Completion size for 2 messages that arrive in this order:
						1) Timer message with CaseInit doc stored in header
						2) Person search EntRes results -->					 
					<completionSize>
						<constant>2</constant>
					</completionSize>
					
					<log message="\n\n\n Person Search aggregater completed: $simple{property.CamelAggregatedCompletedBy}, completion size $simple{property.CamelAggregatedSize}, aggregation key $simple{property.CamelAggregatedCorrelationKey}.   Timeout for aggregation set at: {{parole.event.personSearchTimeout}} \n\n\n" /> 

					<camel:filter>
						<camel:simple>${property.CamelAggregatedSize} == 1 and ${property.CamelAggregatedCompletedBy} == 'timeout'</camel:simple>
						
						<camel:log message="\n\n\n Person Search service is down or timed out. \n\n\n" />
					</camel:filter>
							
					<to uri="bean:personSearchResponseAggregator?method=addFbiIdToCaseInitMessage" />

					<log message="\n\n\n Aggregated CaseInit message:\n\n ${body} \n\n\n" />
					
					<to uri="direct:transformAndInvokeSubscriptionProcessor" />	
					
				</aggregate>
				
		</camel:route>	
					
									
		<camel:route>
			<camel:from uri="direct:transformAndInvokeUnsubscriptionProcessor" />
			
			<camel:convertBodyTo type="java.lang.String"/>
			
			<camel:to uri="xslt:xslt/paroleDocumentToUnsubscription.xsl" />
						
			<camel:log message="\n\n\n After transform: \n\n ${body} \n\n\n" />
			<camel:to
				uri="bean:subscriptionManagerServiceMessageProcessor?method=sendResponseMessage" />
		</camel:route>


		<camel:route>
			<camel:from uri="direct:transformAndInvokeSubscriptionProcessor" />
			
			<camel:log message="\n\n\n transformAndInvokeSubscriptionProcessor...\n\n\n" />
				
			<camel:convertBodyTo type="java.lang.String"/>
																				
			<camel:to uri="xslt:xslt/paroleDocumentToSubscription.xsl" />
			
			<camel:log message="\n\n\n After paroleDocumentToSubscription.xsl, body: \n\n ${body} \n\n\n" />
			
			<camel:to uri="bean:notificationBrokerServiceMessageProcessor?method=sendResponseMessage" />
			
		</camel:route>
					    
	</camel:camelContext>
	
	
	<bean id="notificationBrokerServiceMessageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor">
		<property name="operationName">
			<value>Subscribe</value>
		</property>
		<property name="operationNamespace">
			<value>http://docs.oasis-open.org/wsn/brw-2</value>
		</property>
		<property name="destinationEndpoint">
			<value>notificationBrokerService</value>
		</property>
	</bean>

	<bean id="subscriptionManagerServiceMessageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor">
		<property name="operationName">
			<value>Unsubscribe</value>
		</property>
		<property name="operationNamespace">
			<value>http://docs.oasis-open.org/wsn/bw-2</value>
		</property>
		<property name="destinationEndpoint">
			<value>subscriptionManagerService</value>
		</property>
	</bean>

	<bean id="systemNameToTopicExpressionMapper" class="org.ojbc.util.camel.processor.SystemNameToTopicExpressionMapper">
		<property name="systemNameToTopicMap" ref="systemNameToTopicMap" />
	</bean>
			
	<bean id="personSearchResponseAggregator"
		class="org.ojbc.bundles.intermediaries.parole.event.PersonSearchEntityResolutionResponseHandlerAggregator"/>
	
	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />	
	
</beans>
