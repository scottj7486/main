<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2015 Open Justice Broker Consortium

-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:cxf="http://camel.apache.org/schema/cxf" 
	xmlns:ctx="http://www.springframework.org/schema/context" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:nc20="http://niem.gov/niem/niem-core/2.0"
	xmlns:s="http://niem.gov/niem/structures/2.0"
	xmlns:pcext="http://ojbc.org/IEPD/Extensions/ProbationCase/1.0"
	xmlns:jxdm41="http://niem.gov/niem/domains/jxdm/4.1" 
	xmlns:pci="http://ojbc.org/IEPD/Exchange/ProbationCaseInitiation/1.0"
	xsi:schemaLocation="
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/util
	   http://www.springframework.org/schema/util/spring-util.xsd
       ">
	<!-- needed cxf imports -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring">
	
		<endpoint id="inputDir"
			uri="file:///${publishSubscribe.probationIntermediaryDirectory}/input?idempotent=true&amp;moveFailed=${publishSubscribe.probationIntermediaryDirectory}/error&amp;move=processed/" />

			
		<!-- Probation Service File Handler -->
		<camel:route>
			<camel:from uri="inputDir" />
			
			<camel:log message="\n\n\n Received File Drop doc: \n\n ${body} \n\n\n" />
						
			<camel:setHeader headerName="operationName">			
				<camel:constant>Report-Probation-Case-Initiation</camel:constant>
			</camel:setHeader>
			
			<camel:log message="\n\n\n Operation name: ${in.header.operationName} \n\n\n" />
			
			<camel:to uri="direct:processProbationDocument" />
		</camel:route>



		<!-- Probation Service Handler -->
		<camel:route>
			<camel:from uri="probationEventHandlerServiceEndpoint" />
			
			<camel:convertBodyTo type="java.lang.String" />
			
			<camel:log message="\n\n\n Service received message body:\n ${body} \n\n" loggingLevel="DEBUG"/>
			
			<camel:to uri="direct:processProbationDocument" />
		</camel:route>


		<camel:route id="processProbationDocRoute">
		
			<camel:from uri="direct:processProbationDocument" />
			
			<camel:log message="\n\n\n Processing Probation document...\n\n\n" />

			<camel:filter>
				<camel:simple>${in.header.operationName} == 'Report-Probation-Case-Initiation'</camel:simple>
								
				<camel:setHeader headerName="systemName">
					<camel:xpath>//pcext:SystemName/text()</camel:xpath>
				</camel:setHeader>

				<log message="\n\n\n System Name: ${header.systemName} \n\n\n"/>

				<camel:to uri="bean:systemNameToTopicExpressionMapper?method=populateTopicExpressionHeader" />
				
				<log message="\n\n\n TOPIC: ${in.header.topicExpression} \n\n\n"/>
				
				
				<camel:setHeader headerName="officerEmailAddress">
					<camel:xpath>//nc20:ContactInformation/nc20:ContactEmailID/text()</camel:xpath>
				</camel:setHeader>
										
				<camel:choice>								
					<camel:when>
						<simple>${in.headers.officerEmailAddress} != ''</simple>

							<camel:setHeader headerName="derivedRoutes">
								<simple>{{probation.event.camelEndpointsToCall}}</simple>
							</camel:setHeader>
				
							<camel:filter>
								<camel:simple>${in.headers.derivedRoutes} != ''</camel:simple>
								
								<camel:log message="\n\n\n Calling derived route...: ${in.headers.derivedRoutes} \n\n\n"/>
								
								<camel:recipientList>
									<camel:header>derivedRoutes</camel:header>
								</camel:recipientList>
							</camel:filter>							
					</camel:when>
					
					<camel:otherwise>
						<camel:log message="\n\n\n No email address could be located for record \n\n\n"/>
					</camel:otherwise>				
				</camel:choice>
																
			</camel:filter>

			<camel:filter>
				<camel:simple>${in.header.operationName} == 'Report-Probation-Case-Termination'</camel:simple>
				<camel:wireTap uri="direct:transformAndInvokeUnsubscriptionProcessor" />
			</camel:filter>

		</camel:route>


		<!-- Allows parent bundle to call child bundle derived route for state specific project -->
		<camel:route>		
			<from uri="direct-vm:parentEntryTransformSubscription"/>
			
			<log message="\n\n\n direct-vm:parentEntryTransformSubscription... \n\n\n"/>
			
			<to uri="direct:transformAndInvokeSubscriptionProcessor"/>
		</camel:route>



		<camel:route>
			
			<camel:from uri="direct:transformAndInvokeSubscriptionProcessor" />
			
			<camel:log message="\n\n\n transformAndInvokeSubscriptionProcessor...\n\n\n"/>
															
			<camel:to uri="xslt:xslt/probationDocumentToSubscription.xsl" />
			
			<camel:log message="\n\n\n After transform subscription: \n\n ${body} \n\n\n" />
			
			<camel:to uri="bean:messageProcessor?method=prepareNewSimpleExchangeResponseMessage"/>
			
			<camel:setHeader headerName="operationNamespace"><constant>http://docs.oasis-open.org/wsn/brw-2</constant></camel:setHeader>
			<camel:setHeader headerName="operationName"><constant>Subscribe</constant></camel:setHeader>	
			
			<camel:to uri="notificationBrokerServiceEndpoint" />
		</camel:route>


		<camel:route>
		
			<camel:from uri="direct:transformAndInvokeUnsubscriptionProcessor" />
			<camel:to uri="xslt:xslt/probationDocumentToUnsubscription.xsl" />
			<camel:log message="After transform unsubscription: ${body}" />
			
			<camel:to uri="bean:messageProcessor?method=prepareNewSimpleExchangeResponseMessage"/>
			
			<camel:setHeader headerName="operationNamespace"><constant>http://docs.oasis-open.org/wsn/bw-2</constant></camel:setHeader>
			<camel:setHeader headerName="operationName"><constant>Unsubscribe</constant></camel:setHeader>	
			
			<camel:to uri="subscriptionManagerServiceEndpoint" />
		</camel:route>
		
	</camel:camelContext>


	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.SimpleMessageProcessor" />
	
	<bean id="systemNameToTopicExpressionMapper" class="org.ojbc.util.camel.processor.SystemNameToTopicExpressionMapper">
		<property name="systemNameToTopicMap" ref="systemNameToTopicMap" />
	</bean>
	
	<!-- Only use this setting when doing a bulk load, otherwise comment it out. -->
    <bean id="cxf.default.workqueue" class="org.apache.cxf.workqueue.AutomaticWorkQueueImpl">
        <property name="name" value="default" />
        <property name="queueSize" value="2048" />
    </bean>

</beans>
